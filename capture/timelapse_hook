#!/bin/bash

PREVIEW_DIR=PREVIEW
HOST=
R_PATH=/wwwroot
date=$(date +"%D %T")

# TIMELAPSE_LOGFILE is exported by timelapse scheduler script for use here
LOGFILE=$TIMELAPSE_LOGFILE

# gphoto2 actions:
# init - gphoto2 initialized
# start - command line options parsed
# download - donwloaded captured file to $ARGUMENT
# stop - final cleanups

# Log message to logfile on start and stop
if [[ $ACTION == 'stop' ]]; then
    echo "$date - TIMELAPSE COMPLETE" | tee -a $LOGFILE

    # Generate preview video
    preview_video=preview.mp4
    # TIMELAPSE_DIR exported by scheduler
    ffmpeg -framerate 60 -i $TIMELAPSE_DIR/$PREVIEW_DIR/$TIMELAPSE_SEQNAME -c:v libx264 $TIMELAPSE_DIR/$preview_video
    if [[ $? -ne 0 ]]; then
        echo "$date - Failed to generate preview video for sequence." | tee -a $LOGFILE
    else
        # Copy preview video to web server
        #scp $TIMELAPSE_DIR/$PREVIEW_DIR/$preview_file $HOST:$R_PATH/preview.mp4
        echo "$date - Preview video generated from sequence." | tee -a $LOGFILE
    fi
    exit 0
fi

if [[ $ACTION == 'start' ]]; then
    echo "$date - TIMELAPSE START" | tee -a $LOGFILE
    exit 0
fi

# On init, just exit
if [[ $ACTION == 'init' ]]; then
    exit 0
fi

# On download, generate preview
if [[ $ACTION == 'download' ]]; then
    # ARGUMENT stores the relative path to the downloaded file
    file=$(basename $ARGUMENT)
    
    # Calling dirname again will remove the SOURCE directory, which we don't
    # explicitly know.  dirname will replace it with '.' if empty.
    dir=$(dirname $(dirname $ARGUMENT))
    
    ext=${file##*.}
    preview_file=${file%%.$ext}.jpg
    CMD="exiftool -b -PreviewImage -w $dir/$PREVIEW_DIR/%f.jpg $ARGUMENT"
    $CMD

    # Copy latest preview to web server
    #scp $dir/$PREVIEW_DIR/$preview_file $HOST:$R_PATH/preview.jpg

    echo "$date - Generated preview '$preview_file' for '$file'" >> $LOGFILE
fi


exit 0

