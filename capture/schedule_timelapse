#!/bin/bash

# Inputs:
# -n: name of timelapse folder, e.g. 20161001_description
# -i: interval between photos in seconds, e.g. 10
# One of the following: (if not specified, will be indefinite until manually stopped)
# -f: number of frames to take
# -d: duration, e.g. d/h/m (TODO)

# Implemented: $0 <at time> <folder name> [num frames] 
if [[ $# -lt 2 ]]; then
    echo "Usage:"
    echo $(basename $0) "<at time> <folder name> [num frames]"
    echo ""
    echo "Schedules a timelapse to start at the specified <at time> with files"
    echo "saved to <folder name>."
    echo "Current interval is 10 seconds (6 per minute), max 99999 photos"
    echo "at timespec help: /usr/share/doc/at/timespec"
    exit 1
fi


AT=$1
TIMELAPSE_DIR=$2

# Folder structure within folder:
# SOURCE - raw files go here
# PREVIEW - previews (preview jpg extracted from raw)
# RENDER - rendered videos
SOURCE_DIR=$TIMELAPSE_DIR/SOURCE
PREVIEW_DIR=$TIMELAPSE_DIR/PREVIEW
DATE=$(date +%Y%m%d)
FILENAME="timelapse_${DATE}-%5n.%C"
INTERVAL=10

# Hook script which is called by gphoto2 on each action (init, start download stop)
EXEC_DIR=$(dirname $0)
HOOKSCRIPT="timelapse_hook"

# Set frames argument to empty string
FRAMES=""

# DEBUG echo for now
# If the number of frames is not defined, use continuous
if [[ ! -z $3 ]]; then
    # check that num frames specified is > 0 (no conversion done)
    NUM_FRAMES=$3
    if [[ $NUM_FRAMES -gt 0 ]]; then FRAMES="--frames=$NUM_FRAMES"
    fi
fi

# How to validate the at time?

# Check that the hook script exists and is executable
if [[ ! -x $EXEC_DIR/$HOOKSCRIPT ]]; then
    echo "Hook script for gphoto2 is not executable."
    exit 1
fi

# Make the folder
# Abort if the folder already exists since we don't inspect contents
if [[ -e $TIMELAPSE_DIR ]]; then
    echo "Timelapse folder '$TIMELAPSE_DIR' already exists."
    exit 1
fi
mkdir $TIMELAPSE_DIR
if [[ $? -ne 0 ]]; then
    echo "Failed to create timelapse folder '$TIMELAPSE_DIR'."
    exit 1
fi

# Log file for status/output of gphoto2+hook scripts
# Logfile will be overwritten (but it shouldn't exist since we just made the dir)
LOGFILE=$TIMELAPSE_DIR/timelapse.log
# Export variable for hook script
export TIMELAPSE_LOGFILE=$LOGFILE
echo "Timelapse Scheduler started at $(date +'%D %T')" > $LOGFILE
echo "--------------------------------------------------" >> $LOGFILE

CMD_CAPTURE="gphoto2 --capture-image-and-download --filename=$SOURCE_DIR/$FILENAME -I $INTERVAL $FRAMES --hook-script $EXEC_DIR/$HOOKSCRIPT"

# Create screen session with name matching timelapse dir
SCREEN_NAME=TIMELAPSE-$TIMELAPSE_DIR
screen -dmS $SCREEN_NAME -t log tail -f $LOGFILE

SCREEN_CMD="screen -S $SCREEN_NAME -X screen -t capture $CMD_CAPTURE"
SCREEN_CMD_FILE=$TIMELAPSE_DIR/.screen_cmd
echo $SCREEN_CMD > $SCREEN_CMD_FILE

# Schedule the job; capture only last line output
schedule=$(at -f $SCREEN_CMD_FILE $AT 2>&1 | tail -n+2)
rm $SCREEN_CMD_FILE
echo "Scheduled to start $schedule" | tee -a $LOGFILE

echo "Output is available in screen session: $SCREEN_NAME" 

exit 0
